template<class T>
Tarray<T>::Tarray(){
    capacity = 5;
    used = 0;
    data = new T[capacity];
    }

template<class T>
void Tarray<T>::add(T item){
    if(used == capacity){
        resize();
    }
    data[used] = item;
    used ++;
}

template<class T>
void Tarray<T>::start(){
    current_index = 0;
}

template<class T>
bool Tarray<T>::is_item() const{
    if (current_index < used){
        return 1;
    }
    else{
        return 0;
    }
}

template<class T>
void Tarray<T>::advance(){
    current_index++;
}

template<class T>
T Tarray<T>::current() const{
    return data[current_index];
}

template<class T>
void Tarray<T>::remove_current(){
    T temp; // Temporary profile
    for (std::size_t i = current_index; i < used; i++){ // Itterates through the array starting from the index to be removed (current_index)
        temp = data[i + 1]; // Writes the next index to the temp storage variable
        data[i] = temp; // Writes the contents of temp over to the target index
    }
    used--; // Decrements used
}

template<class T>
void Tarray<T>::resize(){
    T temp[capacity + 5]; // Automatically allocated array for temporary storage
    
    for (std::size_t i = 0; i < capacity; i ++){ // itterates throught the entire array
        temp[i] = data[i]; // writes the array to the temporary stoarge variable
    }

    delete []data; // deallocates the data array

    data = new T[capacity + 5]; // Allocates memory

    for (std::size_t i = 0; i < capacity; i ++){ // itterates throught the entire array
        data[i] = temp[i]; // writes the array to the temporary stoarge variable
    }

    capacity += 5; // Add 5 to capacity
}